plugins {
	id 'org.springframework.boot' version '2.7.2'
	id 'io.spring.dependency-management' version '1.0.12.RELEASE'
	id 'java'
	id "com.github.node-gradle.node" version "3.0.1"
	id 'org.flywaydb.flyway' version '9.0.4'
}

group = 'com.tw'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	implementation 'org.flywaydb:flyway-core:8.5.12'
	implementation 'junit:junit:4.13.1'
	implementation 'junit:junit:4.13.1'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

}

tasks.named('test') {
	useJUnitPlatform()
}
node{
	//version of node to use
	version = '16.16.0'
	//if true it will download the node with above version
	//if false it will try to use the globbaly installed node
	download = true
	workDir = file("${project.projectDir}/src/main/frontend/nodejs")
	npmWorkDir = file("${project.projectDir}/stc/main/frontend/npm")
	nodeModulesDir = file("${project.projectDir}/src/main/frontend")
}
task npmInstallDependencies(type: NpmTask){
	dependsOn 'npmSetup'
	execOverrides{
		it.ignoreExitValue = true
		it.workingDir = 'src/main/frontend'
	}
	args = ['install']
}

task npmBuild(type: NpmTask){
	dependsOn 'npmInstallDependencies'
	execOverrides{
		it.workingDir = 'src/main/frontend'
	}
	args = ['run', 'build']
}

task copyFrontendToBuild(type: Copy){
	dependsOn 'npmBuild'
	from "$projectDir/src/main/frontend/build"
	into  "$buildDir/resources/main/static"
}

processResources{
	dependsOn 'copyFrontendToBuild'
}
